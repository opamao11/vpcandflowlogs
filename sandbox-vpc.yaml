AWSTemplateFormatVersion: "2010-09-09"
Description: SANDBOX VPC with secure subnets, SSM access, and necessary IAM roles

Parameters:
  RegionAZ1:
    Type: String
    Default: us-west-1b
    Description: First Availability Zone

  RegionAZ2:
    Type: String
    Default: us-west-1c
    Description: Second Availability Zone

  VPCCIDR:
    Type: String
    Default: 10.10.0.0/24
    Description: VPC CIDR block

Resources:
  SANDBOXVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: SANDBOX-prod-w-vpc

  DHCPOptions:
    Type: AWS::EC2::DHCPOptions
    Properties:
      DomainName: !Sub "${AWS::Region}.compute.internal"
      DomainNameServers: [ AmazonProvidedDNS ]
      NtpServers: [ 10.130.24.200, 169.254.169.123 ]
      Tags:
      - Key: Name
        Value: opset-SANDBOX-prod-w

  DHCPAssoc:
    Type: AWS::EC2::VPCDHCPOptionsAssociation
    Properties:
      DhcpOptionsId: !Ref DHCPOptions
      VpcId: !Ref SANDBOXVPC

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SANDBOXVPC
      CidrBlock: 10.10.0.0/28
      AvailabilityZone: !Ref RegionAZ1
      Tags:
      - Key: Name
        Value: SANDBOX-prod-a

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SANDBOXVPC
      CidrBlock: 10.10.0.16/28
      AvailabilityZone: !Ref RegionAZ2
      Tags:
      - Key: Name
        Value: SANDBOX-prod-b

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SANDBOXVPC
      Tags:
      - Key: Name
        Value: rt-SANDBOX-prod

  SubnetARouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTable

  SubnetBRouteAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref RouteTable

  VPCNACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref SANDBOXVPC
      Tags:
      - Key: Name
        Value: acl-SANDBOX-prod-w

  NACLInbound443:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPCNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref VPCCIDR
      PortRange:
        From: 443
        To: 443

  NACLInboundICMP:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPCNACL
      RuleNumber: 110
      Protocol: 1
      RuleAction: allow
      Egress: false
      CidrBlock: !Ref VPCCIDR
      Icmp:
        Code: -1
        Type: -1

  NACLOutboundAllowAll:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
      NetworkAclId: !Ref VPCNACL
      RuleNumber: 100
      Protocol: -1
      RuleAction: allow
      Egress: true
      CidrBlock: 0.0.0.0/0

  SubnetANACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetA
      NetworkAclId: !Ref VPCNACL

  SubnetBNACLAssoc:
    Type: AWS::EC2::SubnetNetworkAclAssociation
    Properties:
      SubnetId: !Ref SubnetB
      NetworkAclId: !Ref VPCNACL

  SGSSM:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTPS and ICMP from VPC
      VpcId: !Ref SANDBOXVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 443
        ToPort: 443
        CidrIp: !Ref VPCCIDR
      - IpProtocol: icmp
        FromPort: -1
        ToPort: -1
        CidrIp: !Ref VPCCIDR
      Tags:
      - Key: Name
        Value: sg-ssm-SANDBOX-w

  VPCEndpointSSM:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssm
      VpcId: !Ref SANDBOXVPC
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: [ !Ref SubnetA, !Ref SubnetB ]
      SecurityGroupIds: [ !Ref SGSSM ]

  VPCEndpointEC2Messages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ec2messages
      VpcId: !Ref SANDBOXVPC
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: [ !Ref SubnetA, !Ref SubnetB ]
      SecurityGroupIds: [ !Ref SGSSM ]

  VPCEndpointSSMMessages:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.ssmmessages
      VpcId: !Ref SANDBOXVPC
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: [ !Ref SubnetA, !Ref SubnetB ]
      SecurityGroupIds: [ !Ref SGSSM ]

  VPCEndpointLogs:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.logs
      VpcId: !Ref SANDBOXVPC
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: [ !Ref SubnetA, !Ref SubnetB ]
      SecurityGroupIds: [ !Ref SGSSM ]

  VPCEndpointKMSFIPS:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.kms-fips
      VpcId: !Ref SANDBOXVPC
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds: [ !Ref SubnetA, !Ref SubnetB ]
      SecurityGroupIds: [ !Ref SGSSM ]

  VPCEndpointS3:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      VpcId: !Ref SANDBOXVPC
      VpcEndpointType: Gateway
      RouteTableIds: [ !Ref RouteTable ]

  SSMInstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: SSMInstanceRole-SANDBOX-prod-w
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - !Sub arn:${AWS::Partition}:iam::aws:policy/AmazonSSMManagedInstanceCore
      - !Sub arn:${AWS::Partition}:iam::aws:policy/CloudWatchAgentServerPolicy
      Tags:
      - Key: Name
        Value: SSMInstanceRole-SANDBOX-prod-w

  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: SSMInstanceProfile-SANDBOX-prod-w
      Roles:
      - !Ref SSMInstanceRole

Outputs:
  VPCID:
    Value: !Ref SANDBOXVPC
  SubnetA:
    Value: !Ref SubnetA
  SubnetB:
    Value: !Ref SubnetB
  IAMRole:
    Value: !Ref SSMInstanceRole
  IAMInstanceProfile:
    Value: !Ref SSMInstanceProfile
# minor change to trigger deploy
# change to trigger deploy
# test change
